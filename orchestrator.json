{
    "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
        "baseName": {
            "type": "string",
            "minLength": 6,
            "maxLength": 18,
            "metadata": {
                "description": "The name prefix for all resources created in this deployment."
            }
        },
        "adminUsername": {
            "type": "string",
            "metadata": {
                "description": "SSH username for all virtual machines created by this deployment."
            }
        },
        "sshKeyData": {
            "type": "string",
            "metadata": {
                "description": "The SSH public key for the administrative user"
            }
        },
        "dockerLoginServer": {
            "type": "string",
            "defaultValue": "",
            "metadata": {
                "description": "Login server for docker registry to pull images from"
            }
        },
        "dockerUserName": {
            "type": "string",
            "metadata": {
                "description": "Docker username for pulling docker images"
            }
        },
        "dockerPassword": {
            "type": "securestring",
            "metadata": {
                "description": "Docker password for pulling docker images"
            }
        },
        "dockerRegistry": {
            "type": "string",
            "metadata": {
                "description": "Docker registry where service images reside"
            }
        },
        "dockerTag": {
            "type": "string",
            "defaultValue": "latest",
            "metadata": {
                "description": "Tag of server docker images to deploy (and track on restart)"
            }
        },
        "internalSshPublicKey": {
            "type": "string",
            "metadata": {
                "description": "SSH public key for internal cluster connectivity"
            }
        },
        "internalSshPrivateKey": {
            "type": "securestring",
            "metadata": {
                "description": "SSH private key for internal cluster connectivity"
            }
        },
        "storageAccountType": {
            "type": "string",
            "defaultValue": "Standard_LRS",
            "allowedValues": [
                "Standard_LRS",
                "Standard_ZRS",
                "Standard_GRS",
                "Standard_RAGRS"
            ],
            "metadata": {
                "description": "Storage type for backing VM images + Pachyderm data"
            }
        },
        "baseUri": {
            "type": "string",
            "defaultValue": "https://raw.githubusercontent.com/moadben/aurora_deploy/",
            "metadata": {
                "description": "Public access base URI for deployment scripts"
            }
        },
        "metadataDatabaseName": {
            "type": "string",
            "defaultValue": "aurora",
            "metadata": {
                "description": "Name of the DocDB database to create as metadata store."
            }
        },
        "metadataWaveCollection": {
            "type": "string",
            "defaultValue": "waves",
            "metadata": {
                "description": "Name of the collection for storing wave metadata"
            }
        },
        "metadataVersionCollection": {
            "type": "string",
            "defaultValue": "versions",
            "metadata": {
                "description": "Name of the collection for storing version metadata"
            }
        },
        "topachPort": {
            "type": "int",
            "defaultValue": 4242,
            "metadata": {
                "description": "Port number that topach will listen on"
            }
        },
        "presencePort": {
            "type": "int",
            "defaultValue": 6429,
            "metadata": {
                "description": "Port number that presence will listen on"
            }
        },
        "creamPort": {
            "type": "int",
            "defaultValue": 6666,
            "metadata": {
                "description": "Port number that cream will listen on"
            }
        },
        "apiPort": {
            "type": "int",
            "defaultValue": 3000,
            "metadata": {
                "description": "Port number that the api will listen on"
            }
        },
        "auroraBaseUrl": {
            "type": "string",
            "defaultValue": "http://api.dev.gfn.io",
            "metadata": {
             "description": "url for api to serve to"   
            }
        },
        "k8sTemplateLink": {
            "type": "string",
            "metadata": {
                "description": "URI to template generated by acs-engine to deploy kubernetes cluster. This URI must be accessible via anonymous access."
            }
        },
        "k8sParametersLink": {
            "type": "string",
            "metadata": {
                "description": "URI to parameters file generated by acs-engine to deploy kubernetes cluster. This URI must be accessible via anonymous access."
            }
        },
        "k8sNameSuffix": {
            "type": "string",
            "metadata": {
                "description": "This is the nameSuffix parameter supplied to the k8s cluster template generated by acs-engine."
            }
        },
        "pachydermAddress": {
            "type": "string",
            "metadata": {
                "description":"Endpoint for pachyderm listener (in host:port form)"
            }
        }
    },
    "variables": {
        "docDbName": "[concat(parameters('baseName'), '-metadata')]",
        "redisName": "[concat(parameters('baseName'), '-redis')]",
        "vnetName": "[concat(parameters('baseName'), '-vnet')]",
        "storageName": "[concat(parameters('baseName'), 'store')]",
        "ingressVmName": "[concat(parameters('baseName'), '-ingress')]",
        "glusterVmBaseName": "[concat(parameters('baseName'), '-glusterfs-')]",
        "glusterNetMask": "10.250.0.0/24",
        "glusterNetParts": "[split(variables('glusterNetMask'), '.')]",
        "glusterIPPrefix": "[concat(variables('glusterNetParts')[0], '.', variables('glusterNetParts')[1], '.', variables('glusterNetParts')[2], '.1')]"
    },
    "resources": [
        {
            "apiVersion": "2015-06-15",
            "type": "Microsoft.Network/virtualNetworks",
            "name": "[variables('vnetName')]",
            "location": "[resourceGroup().location]",
            "properties": {
                "addressSpace": {
                    "addressPrefixes": [
                        "10.0.0.0/8"
                    ]
                },
                "subnets": [
                    {
                        "name": "ingress",
                        "properties": {
                            "addressPrefix": "10.0.0.0/24"
                        }
                    },
                    {
                        "name": "kubernetes",
                        "properties": {
                            "addressPrefix": "10.0.1.0/24"
                        }
                    },
                    {
                        "name": "glusterfs",
                        "properties": {
                            "addressPrefix": "[variables('glusterNetMask')]"
                        }
                    }
                ]
            }
        },
        {
            "type": "Microsoft.Storage/storageAccounts",
            "name": "[variables('storageName')]",
            "apiVersion": "2015-06-15",
            "location": "[resourceGroup().location]",
            "properties": {
                "accountType": "[parameters('storageAccountType')]"
            }
        },
        {
            "apiVersion": "2015-01-01",
            "name": "docdb",
            "type": "Microsoft.Resources/deployments",
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "uri": "[concat(parameters('baseUri'), 'docdb.json')]",
                    "contentVersion": "1.0.0.0"
                },
                "parameters": {
                    "docDbName": {
                        "value": "[variables('docDbName')]"
                    }
                }
            }
        },
        {
            "apiVersion": "2015-01-01",
            "name": "redis",
            "type": "Microsoft.Resources/deployments",
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "uri": "[concat(parameters('baseUri'), 'redis.json')]",
                    "contentVersion": "1.0.0.0"
                },
                "parameters": {
                    "redisName": {
                        "value": "[variables('redisName')]"
                    }
                }
            }
        },
        {
            "apiVersion": "2015-01-01",
            "name": "glusterfs",
            "type": "Microsoft.Resources/deployments",
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "uri": "[concat(parameters('baseUri'), 'gluster/azuredeploy.json')]",
                    "contentVersion": "1.0.0.0"
                },
                "parameters": {
                    "storageAccountName": {
                        "value": "[variables('storageName')]"
                    },
                    "virtualNetworkName": {
                        "value": "[variables('vnetName')]"
                    },
                    "virtualNetworkResourceGroup": {
                        "value": "[resourceGroup().name]"
                    },
                    "adminUserName": {
                        "value": "[parameters('adminUsername')]"
                    },
                    "sshKeyData": {
                        "value": "[parameters('internalSshPublicKey')]"
                    },
                    "scaleNumber": {
                        "value": 4
                    },
                    "vmNamePrefix": {
                        "value": "[variables('glusterVmBaseName')]"
                    },
                    "vmIPPrefix": {
                        "value": "[variables('glusterIPPrefix')]"
                    },
                    "gfsSubnetName": {
                        "value": "glusterfs"
                    }
                }
            },
            "dependsOn": [
                "[resourceId('Microsoft.Network/virtualNetworks', variables('vnetName'))]"
            ]
        },
        {
            "apiVersion": "2015-01-01",
            "name": "kubernetes",
            "type": "Microsoft.Resources/deployments",
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "uri": "[parameters('k8sTemplateLink')]",
                    "contentVersion": "1.0.0.0"
                },
                "parametersLink": {
                    "uri": "[parameters('k8sParametersLink')]",
                    "contentVersion": "1.0.0.0"
                }
            },
            "dependsOn": [
                "[resourceId('Microsoft.Network/virtualNetworks', variables('vnetName'))]",
                "Microsoft.Resources/deployments/glusterfs"
            ]
        },
        {
            "apiVersion": "2015-01-01",
            "name": "ingress",
            "type": "Microsoft.Resources/deployments",
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "uri": "[concat(parameters('baseUri'), 'ingress/ingress.json')]",
                    "contentVersion": "1.0.0.0"
                },
                "parameters": {
                    "vmName": {
                        "value": "[variables('ingressVmName')]"
                    },
                    "adminUsername": {
                        "value": "[parameters('adminUsername')]"
                    },
                    "sshKeyData": {
                        "value": "[parameters('sshKeyData')]"
                    },
                    "virtualNetworkName": {
                        "value": "[variables('vnetName')]"
                    },
                    "subnetName": {
                        "value": "ingress"
                    },
                    "storageAccountName": {
                        "value": "[variables('storageName')]"
                    },
                    "topachPort": {
                        "value": "[parameters('topachPort')]"
                    },
                    "internalSshPublicKey": {
                        "value": "[parameters('internalSshPublicKey')]"
                    },
                    "internalSshPrivateKey": {
                        "value": "[parameters('internalSshPrivateKey')]"
                    }                    
                }
            },
            "dependsOn": [
                "[resourceId('Microsoft.Storage/storageAccounts', variables('storageName'))]",
                "[resourceId('Microsoft.Network/virtualNetworks', variables('vnetName'))]"
            ]
        },
        {
            "type": "Microsoft.Compute/virtualMachines/extensions",
            "name": "[concat('k8s-master-', parameters('k8sNameSuffix'), '-0/BootstrapPachyderm')]",
            "location": "[resourceGroup().location]",
            "apiVersion": "2015-06-15",
            "dependsOn": [
                "Microsoft.Resources/deployments/kubernetes",
                "[resourceId('Microsoft.Storage/storageAccounts', variables('storageName'))]"
            ],
            "properties": {
                "publisher": "Microsoft.Azure.Extensions",
                "type": "CustomScript",
                "typeHandlerVersion": "2.0",
                "autoUpgradeMinorVersion": true,
                "settings": {
                    "fileUris": [
                        "[concat(parameters('baseUri'), 'pachyderm/run_pachyderm.sh')]"
                    ],
                    "commandToExecute": "[concat('sh run_pachyderm.sh \"', variables('storageName'), '\" \"pachyderm\" \"', listkeys(resourceId('Microsoft.Storage/storageAccounts', variables('storageName')), '2015-06-15').key1, '\"')]"
                }
            }
        },
        {
            "type": "Microsoft.Compute/virtualMachines/extensions",
            "name": "ingress-vm/InstallIngress",
            "location": "[resourceGroup().location]",
            "apiVersion": "2015-06-15",
            "dependsOn": [
                "Microsoft.Resources/deployments/ingress",
                "Microsoft.Resources/deployments/docdb",
                "Microsoft.Resources/deployments/redis",
                "Microsoft.Resources/deployments/kubernetes",
                "Microsoft.Resources/deployments/glusterfs",
                "[concat(resourceId('Microsoft.Compute/virtualMachines', concat('k8s-master-', parameters('k8sNameSuffix'), '-0')), '/extensions/BootstrapPachyderm')]"
            ],
            "tags": {
                "displayName": "IngressBootApplications"
            },
            "properties": {
                "publisher": "Microsoft.Azure.Extensions",
                "type": "CustomScript",
                "typeHandlerVersion": "2.0",
                "autoUpgradeMinorVersion": true,
                "settings": {
                    "fileUris": [
                        "[concat(parameters('baseUri'), 'ingress/startup.sh')]",
                        "[concat(parameters('baseUri'), 'ingress/docker.presence.service')]",
                        "[concat(parameters('baseUri'), 'ingress/docker.topach.service')]",
                        "[concat(parameters('baseUri'), 'ingress/docker.parse.service')]",
                        "[concat(parameters('baseUri'), 'ingress/docker.cream.service')]",
                        "[concat(parameters('baseUri'), 'ingress/docker.api.service')]"
                    ],
                    "commandToExecute": "[concat('sh startup.sh \"', parameters('dockerLoginServer'), '\" \"', parameters('dockerUserName'), '\" \"', parameters('dockerPassword'), '\" \"', parameters('dockerRegistry'), '\" \"', parameters('dockerTag'), '\" \"', parameters('pachydermAddress'), '\" \"', reference('docdb').outputs.mongoUri.value, '\" \"', parameters('metadataDatabaseName'), '\" \"', parameters('metadataWaveCollection'), '\" \"', parameters('metadataVersionCollection'), '\" \"', parameters('presencePort'), '\" \"', parameters('topachPort'), '\" \"', parameters('creamPort'), '\" \"', parameters('apiPort'), '\" \"', reference('redis').outputs.redisUri.value, '\" \"', parameters('auroraBaseUrl'), '\" && printf \"%s\\n%s\\n%s\\n\" ', '\"-----BEGIN RSA PRIVATE KEY-----\" \"', parameters('internalSshPrivateKey'), '\" \"-----END RSA PRIVATE KEY-----\" > /home/', parameters('adminUsername'), '/.ssh/id_rsa')]"
                }
            }
        }
    ]
}